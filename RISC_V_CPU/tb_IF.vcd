$date
	Tue Jul 16 10:53:55 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_IF $end
$var wire 32 ! pc [31:0] $end
$var reg 1 " clk $end
$var reg 1 # rstn $end
$scope module instuction_fetch $end
$var wire 1 " clk $end
$var wire 1 # rstn $end
$var wire 32 $ pc [31:0] $end
$scope module program_counter $end
$var wire 1 " clk $end
$var wire 1 # rstn $end
$var reg 32 % pc [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_alu $end
$var wire 32 & result [31:0] $end
$var wire 1 ' Z $end
$var wire 1 ( V $end
$var wire 1 ) N $end
$var wire 1 * C $end
$var reg 32 + a [31:0] $end
$var reg 5 , alu_ctrl [4:0] $end
$var reg 32 - b [31:0] $end
$scope module u0 $end
$var wire 32 . a [31:0] $end
$var wire 5 / alu_ctrl [4:0] $end
$var wire 32 0 b [31:0] $end
$var wire 1 1 slt $end
$var wire 1 2 sltu $end
$var wire 32 3 sum [31:0] $end
$var wire 32 4 b2 [31:0] $end
$var wire 1 ' Z $end
$var wire 1 ( V $end
$var wire 1 ) N $end
$var wire 1 * C $end
$var reg 32 5 result [31:0] $end
$scope module adder_subtractor $end
$var wire 1 ( V $end
$var wire 1 ' Z $end
$var wire 32 6 a [31:0] $end
$var wire 32 7 b [31:0] $end
$var wire 1 8 cin $end
$var wire 32 9 sum [31:0] $end
$var wire 32 : cout [31:0] $end
$var wire 1 ) N $end
$var wire 1 * C $end
$scope module bit00 $end
$var wire 1 ; a $end
$var wire 1 < b $end
$var wire 1 8 cin $end
$var wire 1 = cout $end
$var wire 1 > sum $end
$upscope $end
$scope module bit01 $end
$var wire 1 ? a $end
$var wire 1 @ b $end
$var wire 1 A cin $end
$var wire 1 B cout $end
$var wire 1 C sum $end
$upscope $end
$scope module bit02 $end
$var wire 1 D a $end
$var wire 1 E b $end
$var wire 1 F cin $end
$var wire 1 G cout $end
$var wire 1 H sum $end
$upscope $end
$scope module bit03 $end
$var wire 1 I a $end
$var wire 1 J b $end
$var wire 1 K cin $end
$var wire 1 L cout $end
$var wire 1 M sum $end
$upscope $end
$scope module bit04 $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 P cin $end
$var wire 1 Q cout $end
$var wire 1 R sum $end
$upscope $end
$scope module bit05 $end
$var wire 1 S a $end
$var wire 1 T b $end
$var wire 1 U cin $end
$var wire 1 V cout $end
$var wire 1 W sum $end
$upscope $end
$scope module bit06 $end
$var wire 1 X a $end
$var wire 1 Y b $end
$var wire 1 Z cin $end
$var wire 1 [ cout $end
$var wire 1 \ sum $end
$upscope $end
$scope module bit07 $end
$var wire 1 ] a $end
$var wire 1 ^ b $end
$var wire 1 _ cin $end
$var wire 1 ` cout $end
$var wire 1 a sum $end
$upscope $end
$scope module bit08 $end
$var wire 1 b a $end
$var wire 1 c b $end
$var wire 1 d cin $end
$var wire 1 e cout $end
$var wire 1 f sum $end
$upscope $end
$scope module bit09 $end
$var wire 1 g a $end
$var wire 1 h b $end
$var wire 1 i cin $end
$var wire 1 j cout $end
$var wire 1 k sum $end
$upscope $end
$scope module bit10 $end
$var wire 1 l a $end
$var wire 1 m b $end
$var wire 1 n cin $end
$var wire 1 o cout $end
$var wire 1 p sum $end
$upscope $end
$scope module bit11 $end
$var wire 1 q a $end
$var wire 1 r b $end
$var wire 1 s cin $end
$var wire 1 t cout $end
$var wire 1 u sum $end
$upscope $end
$scope module bit12 $end
$var wire 1 v a $end
$var wire 1 w b $end
$var wire 1 x cin $end
$var wire 1 y cout $end
$var wire 1 z sum $end
$upscope $end
$scope module bit13 $end
$var wire 1 { a $end
$var wire 1 | b $end
$var wire 1 } cin $end
$var wire 1 ~ cout $end
$var wire 1 !" sum $end
$upscope $end
$scope module bit14 $end
$var wire 1 "" a $end
$var wire 1 #" b $end
$var wire 1 $" cin $end
$var wire 1 %" cout $end
$var wire 1 &" sum $end
$upscope $end
$scope module bit15 $end
$var wire 1 '" a $end
$var wire 1 (" b $end
$var wire 1 )" cin $end
$var wire 1 *" cout $end
$var wire 1 +" sum $end
$upscope $end
$scope module bit16 $end
$var wire 1 ," a $end
$var wire 1 -" b $end
$var wire 1 ." cin $end
$var wire 1 /" cout $end
$var wire 1 0" sum $end
$upscope $end
$scope module bit17 $end
$var wire 1 1" a $end
$var wire 1 2" b $end
$var wire 1 3" cin $end
$var wire 1 4" cout $end
$var wire 1 5" sum $end
$upscope $end
$scope module bit18 $end
$var wire 1 6" a $end
$var wire 1 7" b $end
$var wire 1 8" cin $end
$var wire 1 9" cout $end
$var wire 1 :" sum $end
$upscope $end
$scope module bit19 $end
$var wire 1 ;" a $end
$var wire 1 <" b $end
$var wire 1 =" cin $end
$var wire 1 >" cout $end
$var wire 1 ?" sum $end
$upscope $end
$scope module bit20 $end
$var wire 1 @" a $end
$var wire 1 A" b $end
$var wire 1 B" cin $end
$var wire 1 C" cout $end
$var wire 1 D" sum $end
$upscope $end
$scope module bit21 $end
$var wire 1 E" a $end
$var wire 1 F" b $end
$var wire 1 G" cin $end
$var wire 1 H" cout $end
$var wire 1 I" sum $end
$upscope $end
$scope module bit22 $end
$var wire 1 J" a $end
$var wire 1 K" b $end
$var wire 1 L" cin $end
$var wire 1 M" cout $end
$var wire 1 N" sum $end
$upscope $end
$scope module bit23 $end
$var wire 1 O" a $end
$var wire 1 P" b $end
$var wire 1 Q" cin $end
$var wire 1 R" cout $end
$var wire 1 S" sum $end
$upscope $end
$scope module bit24 $end
$var wire 1 T" a $end
$var wire 1 U" b $end
$var wire 1 V" cin $end
$var wire 1 W" cout $end
$var wire 1 X" sum $end
$upscope $end
$scope module bit25 $end
$var wire 1 Y" a $end
$var wire 1 Z" b $end
$var wire 1 [" cin $end
$var wire 1 \" cout $end
$var wire 1 ]" sum $end
$upscope $end
$scope module bit26 $end
$var wire 1 ^" a $end
$var wire 1 _" b $end
$var wire 1 `" cin $end
$var wire 1 a" cout $end
$var wire 1 b" sum $end
$upscope $end
$scope module bit27 $end
$var wire 1 c" a $end
$var wire 1 d" b $end
$var wire 1 e" cin $end
$var wire 1 f" cout $end
$var wire 1 g" sum $end
$upscope $end
$scope module bit28 $end
$var wire 1 h" a $end
$var wire 1 i" b $end
$var wire 1 j" cin $end
$var wire 1 k" cout $end
$var wire 1 l" sum $end
$upscope $end
$scope module bit29 $end
$var wire 1 m" a $end
$var wire 1 n" b $end
$var wire 1 o" cin $end
$var wire 1 p" cout $end
$var wire 1 q" sum $end
$upscope $end
$scope module bit30 $end
$var wire 1 r" a $end
$var wire 1 s" b $end
$var wire 1 t" cin $end
$var wire 1 u" cout $end
$var wire 1 v" sum $end
$upscope $end
$scope module bit31 $end
$var wire 1 w" a $end
$var wire 1 x" b $end
$var wire 1 y" cin $end
$var wire 1 z" cout $end
$var wire 1 {" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
1{"
1z"
1y"
1x"
1w"
0v"
1u"
1t"
0s"
1r"
0q"
1p"
1o"
0n"
1m"
0l"
1k"
0j"
1i"
1h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
b11110000000000000000000000000000 :
b10000000000000000000000000000000 9
08
b10010000000000000000000000000000 7
b11110000000000000000000000000000 6
b10000000000000000000000000000000 5
b10010000000000000000000000000000 4
b10000000000000000000000000000000 3
02
11
b10010000000000000000000000000000 0
b0 /
b11110000000000000000000000000000 .
b10010000000000000000000000000000 -
b0 ,
b11110000000000000000000000000000 +
1*
1)
0(
0'
b10000000000000000000000000000000 &
b0 %
b0 $
0#
0"
b0 !
$end
#5000
1"
#10000
b10010000000000000000000000000000 &
b10010000000000000000000000000000 5
0"
b1 ,
b1 /
1#
#15000
b100 !
b100 $
b100 %
1"
#20000
b11110000000000000000000000000000 &
b11110000000000000000000000000000 5
0"
b10 ,
b10 /
#25000
b1000 !
b1000 $
b1000 %
1"
#30000
b1100000000000000000000000000000 &
b1100000000000000000000000000000 5
0"
b11 ,
b11 /
#35000
b1100 !
b1100 $
b1100 %
1"
#40000
b11110000000000000000000000000000 &
b11110000000000000000000000000000 5
0"
b100 ,
b100 /
#45000
b10000 !
b10000 $
b10000 %
1"
#50000
0"
b101 ,
b101 /
#55000
b10100 !
b10100 $
b10100 %
1"
#60000
0"
b110 ,
b110 /
#65000
b11000 !
b11000 $
b11000 %
1"
#70000
b1 &
b1 5
0"
b111 ,
b111 /
#75000
b11100 !
b11100 $
b11100 %
1"
#80000
b0 &
b0 5
0"
b1000 ,
b1000 /
#85000
b100000 !
b100000 $
b100000 %
1"
#90000
b0 &
b0 5
1'
12
01
0*
0y"
0t"
0o"
0)
0z"
0u"
0p"
b0 :
0k"
0{"
0v"
0q"
b0 3
b0 9
0l"
0x"
0i"
b0 4
b0 7
0w"
0r"
0m"
0h"
0"
b0 ,
b0 /
b0 -
b0 0
b0 +
b0 .
b0 6
#95000
b100100 !
b100100 $
b100100 %
1"
#100000
0"
b1 ,
b1 /
